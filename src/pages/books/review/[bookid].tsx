import { type NextPage } from "next";
import Head from "next/head";

import { requireAuth } from "../../../utils/requireAuth";
import QuoteTile from "../../../components/QuoteTile";
import Link from "next/link";
import { prisma } from "../../../server/db";
import { getSession } from "next-auth/react";
import { trpc } from "../../../utils/trpc";
import SkeletonTile from "../../../components/SkeletonTile";

export const getServerSideProps = requireAuth(async (ctx) => {
    const session = await getSession({ ctx });
    const book = await prisma.book.findUnique({
        where: {
            id: ctx.query.bookid as string
        },
    });
    if (book?.userId !== session?.user.id) {
        ctx.res.setHeader('Location', '/404');
        ctx.res.statusCode = 302;
        ctx.res.end();
    }
    return {
        props: { bookId: book!.id }
    }
}, 'books');

type Props = {
    bookId: string;
}

const BookReview: NextPage<Props> = ({ bookId }) => {
    const { isLoading, isError, data, refetch } = trpc.books.getBook.useQuery({ bookId });
    const onFavouriteToggled = async () => {
        await refetch();
    }
    return (
        <>
            <Head>
                <title>Rekindled</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex flex-col justify-center items-center gap-4">
                <div className="flex flex-col text-center">
                    <h1 className="text-4xl text-red-500 font-bold">{data?.title}</h1>
                    <h2 className="text-2xl text-gray-400 italic">By {data?.author}</h2>
                </div>
                <div className="flex flex-col gap-y-4 w-full items-center">
                    {
                        isLoading
                            ? (
                                <>
                                    <SkeletonTile />
                                    <SkeletonTile />
                                    <SkeletonTile />
                                </>
                            )
                            : (
                                data &&
                                    data.highlights.length > 0
                                    ? data.highlights.map((highlight) => <QuoteTile id={highlight.id} onFavouriteToggled={onFavouriteToggled} isFavourite={highlight.isFavourite} key={highlight.id} quote={highlight.content} location={highlight.location} />)
                                    : <p className="text-gray-500">No favourites found</p>
                            )
                    }
                    {
                        isError && <p className="text-gray-500">An error occurred</p>
                    }
                </div>
                <Link className="fixed bottom-[5.5rem] bg-red-500 text-white px-10 py-2 rounded-full shadow-xl" href={"/books"}>Back</Link>
            </main>
        </>
    );
};

export default BookReview;
