import { type NextPage } from "next";
import Head from "next/head";

import { requireAuth } from "../../../utils/requireAuth";
import QuoteTile from "../../../components/QuoteTile";
import Link from "next/link";
import { prisma } from "../../../server/db";
import { Highlight } from "@prisma/client";
import { getSession } from "next-auth/react";
import { HighlightViewModel } from "../../../types/HighlightViewModel";
import { parseDateForDisplay } from "../../../utils/parseDateForDisplay";

export const getServerSideProps = requireAuth(async (ctx) => {
    const session = await getSession({ ctx });
    const book = await prisma.book.findUnique({
        where: {
            id: ctx.query.bookid as string
        },
        include: {
            highlights: {
                orderBy: {
                    location: 'asc'
                }
            }
        },
    });
    console.log('User id from book', book?.userId);
    console.log('User id from session', session?.user.id);
    if (book?.userId !== session?.user.id) {
        ctx.res.setHeader('Location', '/404');
        ctx.res.statusCode = 302;
        ctx.res.end();
    }
    return {
        props: {
            title: book?.title,
            author: book?.author,
            highlights: book?.highlights.map(x => ({ ...x, highlightedOn: parseDateForDisplay(x.highlightedOn) }))
        }
    }
}, 'books');

type Props = {
    title: string;
    author: string;
    highlights: HighlightViewModel[];
}

const BookReview: NextPage<Props> = ({ title, author, highlights }) => {
    return (
        <>
            <Head>
                <title>Rekindled</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex flex-col justify-center items-center gap-4">
                <div className="flex flex-col text-center">
                    <h1 className="text-4xl text-red-500 font-bold">{title}</h1>
                    <h2 className="text-2xl text-gray-400 italic">By {author}</h2>
                </div>
                <div className="flex flex-col gap-y-4">
                    {
                        highlights &&
                            highlights.length > 0
                            ? highlights.map((highlight) => <QuoteTile key={highlight.id} quote={highlight.content} location={highlight.location} />)
                            : <p className="text-gray-500">No highlights found</p>
                    }
                </div>
                <Link className="bg-red-500 text-white px-4 py-2 rounded-lg" href={"/books"}>Back</Link>
            </main>
        </>
    );
};

export default BookReview;
